freeCodeCamp.org
Begin: 11:07 02/09/2020 		6 hours
End:
by OT√ÅVIO	maybe I put this txt in Markdown language (in a distant future)
__________________________________________________
Operation: Select and edit

In CSS we use selectors
	Types: 

    1) Element selector: uses the tag.
	<p> </p> -> p {	}

    2) Class selector: to specific items 
	<p class="aclass"> </p> -> .aclass { }
	- to several items (h1, p...)
	- dot is used as prefix

    3) Id selector:
	<p id="sometext"> </p> -> #sometext { }
	- octothorp

How to link a CSS file to a HTML one
	- Inside <head> </head> : 

    <link rel="stylesheet" type="text/css" href="../css/style.css">


Specificity: the more specific selector overrides other 
	inline-style > id > class > element

    <h2 class="about-me" id="me-about" style="color: steelblue;">

What are the differences between class and id?
	- As seem, id is more specific.
	CLASS: to be used multiple times
	ID: despite working if set in more than one object, the convention is to use once.

Pseudoselectors
	- Used after a colon (:)
	- Don't let space
    h2:hover {
		/*properties if pointer is over the selector's object and hover is the most specific*/ 
    }

    ul:first-child { } does not work
    li:first-child {
	color: blue;
    } /*works. It's the first list item*/

		first-child, last-child, nth-child(n), only-child (does not apply to multiple children)


More pseudoselectors
	link is unvisited link
	visited's default color: purple

    <a href="https://google.com" id="google-link">Clique aqui para ir ao Google!</a>
	- You need to put https to create a web link
	- The id is dispensable because it's the only link on page

    #google-link:link {		/*before clicking*/
	color: green;
    }

    #google-link:visited {
	color: red;
    }


Advanced selectors
1)
    h2 + a {
    	/*every a that comes directly after h2 (that follows h2)*/
    }

2) General sibling combinator/selector
	- the same as before, but both elements have to be sharing the same parent
    textarea ~ button {		
	/*to style every button followed by textarea and the same parent*/
    }

3) Child selector: direct children
    ul > li {
	/*every li inside ul. This is not so specific as li with pseudoselector. Does not apply to a sublist (list iniside an list item) */
    }

4) Decendant selector
    ul li {
	/*apply properties to li children*/
    }
    

Attribute selectors
    x[atrr=value] {  }
    h2[class='about-me'] { }	/*quotes are not imperative*/

    img[src^=...] { }	/*the attribute begins with this value*/
    img[src$=...] { } 	/*the attribute ends with this value*/
    img[src*=...] { } 	/*if it contains anywhere*/

	
a) White space attribute selector

    <h2 class="subtitle article-subtitle"> </h2> -> h2[class~="article-subtitle"]
	- you have to use ~=
	- dont forget the space between class and

b) General attribute selector (I couldn't understand!)
    h2[class|=article-subtitle] { /*dash*/
	background: green;
}


Properties
	property: value;	you can not forget colon and semicolon

---
{} = curly braces
[] = curly brackets
---	

Colors
	- 3 ways to represent: hexadecimal, name, rgba()
    Hex: #rrggbb
    RGB: decimal, 0 to 255. Easier to understand and modify

	The most blue you can get: #0000ff or rgba(0, 0, 255, 1)
	white: #ffffff or rgba(255, 255, 255, 1)

	- The developer should use a color picker
	- 1 is 100% opacity in rgba. 0 is transparent.
	- rgb() is a function.
	- you can use rgba to a color's fading.

Coloring text
    color: blue;	/*yeah it's weird but is for text*/

Background colors
    background: rgba(196, 116, 79, 1)
		
	- or background-color (but it is not flexible, you can not add images, for example)
	- every selector has its own backgrounf
	- the entire page: body selector.
	- colors of different bgs don't mix

Images by URL
	- url("") function
	- Images stored on Web or locally. 
    background: url("https://....");
	or background-image
	- the image repeats if it is small and this will be solved futurely

Other background properties
    background-size: 50px 100px; [height and width <->]
	or cover; 		perfect to one image in the box. Resize the image to fit the box 
	or contain; 	follows the proportion (can repeat). Fully visible
	
    background-repeat: no-repeat;
	or repeat 

    background-color: steelblue;


Gradient
	- 2 types: radial and linear.
    background: linear-gradient(to right, red, blue, green);
	- you can put many colors you want. The first one is where gradient starts (the opposit of 'to')
	- to top, bottom, right, left. bottom right, bottom left... all corners.
	- default is to bottom (starts on top)

    background: linear-gradient(-90deg, red, blue);
	- the zero angle is on center of the object, pointed to top. -90deg = to left (starts on right). 90deg = to right. 180deg = -180deg = to bottom. 190deg = -170deg, etc.


---

    background: radial-gradient(circle, red 20%, blue 40%, green 55%);
	- the first color is in center (center to corners)
	- put percentages near to colors to adjust the filling [??]
	- ellipse (default) or circle.
	- you can set start position and etc. [this course does not teach it]


Types of units (introduction)
	- Absolute units: centimeters, inches - they aren't affected by anyone
	- Relative units: percentage
		- Responsive interface

	- Pixels can be considered absolute, but the display's resolution changes the visualization. In practice they are relative

    font-size: 2cm;
	or 2mm, 2px, 2pt (point - a little bigger than pixel), 2pc (1pc equals 12 points - much bigger than it)

    height: 400px; 	/*depends on your display*/
    width: 70%;		/*70% of screen's horizontal axis. Dynamic.*/

    font-size: 2em;	/*double. Works only for fonts (?)*/
    height: 2em;

Viewport
	- How many percent of width or height the element will occupy.
	- vw and vh
	- viewport is a bit bigger than body

    height: 400vh;	/*400% display height (does not mean cover all screen or extrapolate the limits. The object is inside page)
    width: 70vw;


Text manipulation (the font does not matter. Text only!)
    text-decoration: underline;
	or: line-through (same as <del>), overline, none;
    text-transform: uppercase;
	or: lowecase, capitalize;
    text-align: justify;
	or: left, right, center;

Font-manipulation
    font-size: 2em;  or 40px;
    font-weight: 500;
	- Bolding. From 0 to infinity, but most fonts are to 800 or 900. 400 is the normal.
	- depends on the font
    font-style: normal;		/*different from font-family*/
	or italic, oblique (more italicized)

<span> </span> inline container

Font families
	- A colection of fonts that have similar features
	- serif fonts: TNR, Georgia, Palatino, Garamond
	- sans serif fonts (much easier to read) - arial, calibri, georgia
	- monospace (all characteres have same width)
	- cursive;

    font-family: sans-serif;	(general sans-serif font)
    font-family: "Times New Roman", serif;
	- meaning: if TNR is available, apply it, but if is not, return to serif.
	- the best choice commonly is a sans-serif type.

Commonly, in Web Design, the creator selects two fonts: one for heading and another for text.

Including external fonts with Google Fonts
	https://fonts.google.com
	- There are more fonts there than stored in your computer or css script. 
	- Do not select so many properties (italic, bold, regular) because loading time will be longer

Using external fonts
	<link href="">	on html head.
	- Then, just add the name in font-family. So easy.

	- In case of font's server fails or connection of your computer to internet is unavailable -> backup font
    font-family: "Lato", sans-serif;

CSS BOX MODEL ---
	- Box Model is a series of positioning properties designed to help with layout.
	- Each property works in a different way, and positions the item with different spacing.
	- It is the most commonly used way to position items.
	- Other models not the box model: Flex Box

	Layers: content, padding, border, margin

2) Padding: represents the space between the content and the border. Give more room around content. Internal space.
    padding: 10px 20px;
	- top, right, bottom, left (clockwise)
	- only one value: all sides. Two values: y and x-axis. Three values: repeats the opposite side value and apply to miss-valued (does it make sense in English?üò•).
	- 4 values separated by spaces
    padding: 100px 40px 0 5px;
    padding-top, padding-right, padding-botton, padding-left

3) Border: divider, separation line between the padding and margin.
	- By default, it is invisible.
    border: 1px solid #ff00ff;
	- Every element has its own border (you will always be able to set it)
	- size (px, %), style (solid, double, dashed, dotted), color
	
4) Margin: the space between the border and all other content. External space.
	- Moves the object through the page.
	- Values are same as padding
	- marging dash position

move on = continue
    
Float and display types
	- Inline vs block
	- It is possible to change the way they look
a) Float
    float: right;
	- the object gets a new context, starts floating, and the content goes up. But the rule is to not hide text content, so the text stays next to the object. 	- works with images, texts (titles, links...), etc.
	- it stays above elements, but not contents.
	- you can put a <div> float and children will inherit this
    float: none;
	- it's the default. Use this to invalidate inherited float
	-- I have to study this more!


b) Display
    display: ;
	- changes the display that comes by default.
    display: none; /*the content completely disapear and it's space is occupied by other*/
	or: inline (nivelates by top), inline-block (nivelates by bottom)
	flex and grid?
    display: inline-block;
	- inline-block is very useful.



Changing content size
	- height: 400px;	/*absolute units are most used here*/
		- can be used to boxes, images, and more (that I have not learned yet)
	- width: 70vw;		/*relative only*/
		- same as 70%

	- Remember you can use inspect page browser's feature and emulate different devices viewing your site. Obs.: responsive (you set the display dynamically)


	
	
